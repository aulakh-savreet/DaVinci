@page "/return"
@using DaVinci.Data;
@*
Users can return the borrowed books in this section.
After choosing the desired book from the list of checked out books, the user can click the return button. 
Upon receipt of the book, it is appended to the initial book list and an acknowledgement is presented.
Before choosing a book, users are unable to click the return button.
*@

@if(Patron == "Guest")
{
    @*Displays if not logged in on load of page*@
    GuestWarning(); 
}

@* HEADING *@
<div class="PageWidth">
    <div class="row">
        <div class="col">
            <h3>Return Books</h3>
        </div>
        <div class="col" id="PatronName">
            <h3>@Patron</h3>
         </div>
    </div>
</div>

@*PAGE CONTENT*@
<div class="PageContent PageWidth">
    <div class="container text-center return">
        @* SELECT RETURNING BOOKS *@
        <div class="row">
            <div class="col" id="returnableBooksTitle">
                <label>Returnable books</label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <select class="form-select borrowedBooks" @bind="addtolist">
                    @*IF NOT LOGGED IN SHOW NOTHING*@
                    @if(Patron == "Guest")
                    {
                        <option disabled selected>Please Log in to view</option>
                    }
                    
                    @*  DISPLAYS LIST IF LOGGED IN   *@
                    @*should look up based on Patrons name and ID when logged in*@
                    @* BOOK-ID,TITLE,BORROWDATE, *@

                    else{
                        <option selected disabled>Select Book to Return</option>

                        foreach (TransactionData transaction in RBM.searchByPatronID(PatronID))
                        {
                            <option value="@transaction" class="returnlist">@BooksManager.GetBook(transaction.BookISBN).AsOption()</option>
                        }
                    }
                </select>
            </div>

            @*ADD REMOVE OPTION*@

            @if (Patron == "Guest")
            {
                @*GUEST VIEW*@
            <div class="col">
                <button type="button" class="btn btn-success btn-select add-remove" disabled>Add</button>
            </div>
            <div class="col">
                    <button type="button" class="btn btn-danger btn-select add-remove" disabled>Clear List</button>
                </div>
            }
            else
            {
                <div class="col">
                    <button type="button" class="btn btn-success btn-select add-remove" @onclick="AddTransacitonList">Add</button>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-danger btn-select add-remove" @onclick="ClearTransacitonList">Clear List</button>
                </div>
            }
        </div>

        @* RETURNING BOOKS LIST *@
            <div class="row">
                <div class="col" id="returningBooksTitle">
                    <label>books returning:</label>
                </div>
            </div>
            <div class="row">
                <div class="col" id="returningbooks">

                @foreach (var transaction in ReturnList)
                    {
                    <label class="form-check-label align-content-sm-center" id="returningBooks">@BooksManager.GetBook(transaction.BookISBN)</label> @*@transaction.GetLoanedDate()*@
                    }
                </div>
            </div>


        @*  CURRENT DATE    *@
        <div class="row date">
            <div class="col align-self-end confirm">
                <label>Date of Return: </label>
                <label>@DatesManager.GetCurrentDate()</label>@*RETURN*@
            </div>
        </div>

        @*  RETURN BOOKS BUTTONS*@
        <div class="row">
            <div class="col confirm">
                @*  LOGGED IN *@
                @*check if over due, increase quantity of books from bookManager, changes the status to return*@
                @if (Patron != "Guest")
                {
                    <button type="submit" class="btn btn-primary confirm-btn" @onclick="isSuccessfulReturn">
                        Return Book
                    </button>
                }
                @*  DISABLED BUTTON   *@
                else
                {
                    <button type="submit" class="btn btn-primary confirm-btn" disabled>
                        Return Book
                    </button>
                }
            </div>
        </div>
    </div>
</div>


@code {
    TransactionManager RBM = new TransactionManager(); //RBM = Return Book List


    // Gets the Patrons info from LoginManager 
    private string _patron = LoginManager.Patron; 
    private string _patronID = LoginManager.Patron; 

    public string Patron { get => _patron; set => _patron = value; } 
    public string PatronID { get => _patron; set => _patron = value; } 

    //gets current day from the DatesManager
    public string CurrentDate = DatesManager.GetCurrentDate();

    public static List<TransactionData> _ReturnBookData = TransactionManager.GetTransaction();

    //created for the add function
    public string addtolist;
    //created for the return list
    public List<TransactionData> ReturnList = new List<TransactionData> ();
    //
    public string returnCart;
    // addS to ReturnList


    /*  POPULATE THE RETURNABLE BOOKS*/
    public void AddBorrowedBooks(ChangeEventArgs e)
    {
        //bookTitle, BookISBN, Author, Genre, quantity
        string[] part = e.Value.ToString().Split(",");

        string bookTitle = part[0];
        string ISBN = part[1];
        string Author = part[2];
        string Genre  = part[3];
        string quantity = part[4];

    }


    public void SelectedBook(ChangeEventArgs e)
    {
        //bookTitle, BookISBN, Author, Genre, quantity
        string[] part = e.Value.ToString().Split(",");

        string bookTitle = part[0];
        string ISBN = part[1];
        string Author = part[2];
        string Genre = part[3];
        string Patron = part[4];
        int quantity = int.Parse(part[4]);
        string PatronID = part[4];
        string DueDate = part[5];

    }


    /* ADDS TO THE RETURN LIST */
    public void AddTransacitonList()
    {
        //  gives a warning and does nothing
        if (Patron == "Guest")
        {GuestWarning();}

        else if (addtolist == null)
        {
            App.Current.MainPage.DisplayAlert("CANNOT ADD TO LIST", $"Error in trying to add to list", "OK");
        }

        else
        {
            string[] part = addtolist.Split(",");
            string PatronId = part[0];
            string BookISBN = part[1];
            string LoanedDate = part[2];


            string DueDate = DatesManager.CalculateDueDate(LoanedDate);

            ReturnList.Add(new TransactionData(PatronId, BookISBN, LoanedDate)); //, DueDate


            App.Current.MainPage.DisplayAlert("ADDED TO RETURN LIST", $"added {BooksManager.GetBookTitle(BookISBN)} to the return list", "OK");


            foreach (TransactionData transaction in RBM.searchByPatronID(PatronID))
            {
                if(BooksManager.GetBookID(transaction.BookISBN) == BookID)
                {
                    App.Current.MainPage.DisplayAlert("ADDED TO RETURN LIST", $"Removed from Dropdown {transaction}", "OK");

                    ReturnList.Remove(transaction);
                }
            }

        }

    }

    /* REMOVES FROM THE RETURN LIST */
    public void ClearTransacitonList()
    {

        if (addtolist != null)
            {
                ReturnList.Clear(); //, DueDate

        }

        // displays if null
        else
        {
            App.Current.MainPage.DisplayAlert("Error", $"the boook selected was null", "back");

        }

    }




    /*  DISPLAYS ALERT RETURN  */
    public void isSuccessfulReturn()
    {
        int fine = 0;

        if (Patron == "Guest")
        {
            GuestWarning();
        }


        else{
            foreach (var Transaction in ReturnList)
            {


                // update transactions status
                Transaction.updateStatus();



                
                IncreaseBookIssued();

                

            }
        }

        ReturnList.Clear(); 
       
        // No overdue books
        if (fine == 0)
        {
            App.Current.MainPage.DisplayAlert("Thank you", $"Book('s) have been returned and no overdue books", "Continue");
        }

        // checks if there is an error in quantity
        else if (fine > 0)
        {
            App.Current.MainPage.DisplayAlert("ERROR", $"{fine} is a negative", "Continue");
        }
        // overdue books
        else
        {        
            App.Current.MainPage.DisplayAlert("Overdue Books", $"{fine} books are overdue", "Continue");
        }

    }


    /*  EXTENDS THE BOOK COUNT FOR EVERY BOOK RETURNED  */
    public void IncreaseBookIssued() 
    {
        //return i;
    }



    public void GuestWarning()
    {
        if (Patron == "Guest")
        {
            App.Current.MainPage.DisplayAlert("LOGGED INTO GUEST", $"please log into to return books", "Back");

        }
    }


}

